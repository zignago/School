/* These are your function declarations.
 * DO NOT edit this file; otherwise, your program will not run as expected
    during the grading process
 */

#include <iostream>

#ifndef MAZE
#define MAZE

using std::cout;
using std::endl;
using std::cin;
using std::cerr;
using std::string;


/*
The your (the student authorâ€™s) Campus Username
*/
void get_identity(string &my_id);


/**
Creates a dynamically allocated array of std::string elements.
Returns a pointer to that array.
**/
string * build_matrix(int rows);


/**
Fills the matrix with ONE line per string in the array.
Consider using the std::string getline method
Note: discard any extra newlines (if any) in main, not here
**/
void fill_matrix(string *matrix, int rows);


/**
Print the matrix as in the sample_output.txt.
Note, any newlines between mazes are better handled in main.
**/
void print_matrix(string *matrix, int rows);


/**
Delete the dynamically allocated array of strings.
The paramter, matrix, is passed in as a reference to a pointer.
Don't leave a dangling pointer (handle this in the function).
**/
void delete_matrix(string *&matrix);


/**
Finds the starting position of Niobe.
Note: row and col are passed by reference to keep track of the finding
**/
void find_start(string *matrix, int rows, int &row, int &col);


/**
This is the recursive backtracking function you need to write.
It should return true if you found the solution,
and false if there is no solution.
It should leave a trail of @ signs along the path to the solution.
Make sure to build your solution by first developing pseudocode instead of
trying to code it first. Use the Sudoku code example for reference or as a
starting point.
**/
bool find_exit(string *matrix, int row, int col);


/**
Returns true if row and col are the final exit location, and false otherwise.
**/
bool at_end(string *matrix, int row, int col);


/**
Returns true if the position indexed by row and col when INCREMENTED in
  "direction" is a valid move (not the validity of the position indexed by row
  and col alone), and false otherwise.

Note: "NORTH" is row--, "SOUTH" is row++, "EAST" is col++, and "WEST" is col--
  Use the exact strings above for direction.
**/
bool valid_move(string *matrix, int row, int col, string direction);

#endif
